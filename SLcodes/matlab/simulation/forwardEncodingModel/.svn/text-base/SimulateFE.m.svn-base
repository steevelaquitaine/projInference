
%Author: Steeve Laquitaine
  %date: 140304
  %purpose:
        %Simulate forward encoding (FE)
        %Simulate BOLD responses from a Bayesian neural network (training 
        %and test data), run FE model on training data and use the 
        %channels weights to reconstruct motion directions in test data.

%PREDICTIONS:
%- We train weights on simulated area X BOLD (all directions,flat prior)
%- if area encodes posterior only (e.g., LIP) recontructed estimates from
%its BOLD collected in a mild prior condition should be mildly biased 
%toward the prior mean.a=
%- if area encodes llh only (e.g., MT) recontructed estimates from
%its BOLD collected in a non flat prior condition should lie at the true
%motion direction.

%notes: 
%What are reasonable parameters and why?
%- when BOLD amplitude is too high forward encoding does not work.
%Reconstruction is not possible.

%requires my code library
addpath(genpath('/Dropbox/Library/Library_code/matlab/'))

%1 Simulate training BOLD data "LIPBOLDmnTrain" (m voxels, 
%n trials). Be sure to repeat directions to avoid poorly trained weights.
close  all
dirTrained=repmat(1:1:360,1,1);
whichNeurInaVoxelMT=[];
whichNeurInaVoxelLIP=[];
whichNeurInaVoxelPrior=[];
[~,LIPBOLDmnTrain,PriorBOLDmn,~,~,VoxPrefDirLIP,~,whichNeurInaVoxelLIP,whichNeurInaVoxelPrior]=simulateBOLD(dirTrained,...
    'priorstd=0',...
    'priormean=225',...
    'numVoxelsMT=1',...
    'numVoxelsLIP=100',...
    'NeurInaVoxelMT=1',...
    'NeurInaVoxelLIP=1000',...
    whichNeurInaVoxelMT,...
    whichNeurInaVoxelLIP,...
    whichNeurInaVoxelPrior,...
    15,...
    'sortVoxels=on',...
    'displayNetwork=off',... 
    'displayBOLD=off');

%%2 FE model: train channels' weights and outputs "Ctrkn" for each voxel
[CtrknLIP,channelsLIP,dirSpaceLIP,preferredDirLIP,WmkLIP]=doForwardEncoding(LIPBOLDmnTrain,...,
    6,...
    dirTrained,...
    'display=off');
%set(gca,'ytick',1:10:numel(VoxPrefDirLIP),'yticklabel',VoxPrefDirLIP(1:10:end))

% %%3 Reconstruct training directions from training BOLD and weights (checking)
%[estimatedDirLIP,~,~,Condition]=reconstructDir(LIPBOLDmnTrain,WmkLIP,CtrknLIP,dirTrained);
%figure; drawCircStat(estimatedDirLIP',dirTrained'); close;

%4 Decode directions with trained weights from area X's BOLD when area X 
%is simulated a mild prior 
dirTested=repmat(1:1:360,1,1);
[~,LIPBOLDmnTest,~,~,VoxPrefDirLIP]=simulateBOLD(dirTested,...
    'priorstd=0.1',...
    'priormean=225',...
    'numVoxelsMT=1',...
    'numVoxelsLIP=1000',...
    'NeurInaVoxelMT=1',...
    'NeurInaVoxelLIP=1000',...
    whichNeurInaVoxelMT,...
    whichNeurInaVoxelLIP,...
    whichNeurInaVoxelPrior,...
    15,...
    'sortVoxels=off',...
    'displayNetwork=off',...
    'displayBOLD=off');

%decode test directions with trained weights
[estimatedDirLIPtest,~,~,Condition]=reconstructDir(LIPBOLDmnTest,WmkLIP,CtrknLIP,dirTrained);
figure; drawCircStat(estimatedDirLIPtest',dirTested'); close;
plot([0 360],[225 225],'--b')


