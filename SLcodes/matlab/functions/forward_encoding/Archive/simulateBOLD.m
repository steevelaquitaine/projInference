
      %author: steeve laquitaine
        %date: 140329
     %purpose: simulate a matrix bold responses for m voxels and n trials.
       %usage: [MTBOLDmn,LIPBOLDmn]=simulateBOLD(1:1:360,'priorstd=0.1','numVoxels=100','numVoxelsLIP=100',16,'display=off')
 %description: simulate BOLD with direction-tuned neuron in the encoding
 %stage and readout neurons in the decoding stage
 
function [MTBOLDmn,LIPBOLDmn,PriorBOLDmn,k,VoxRespAmpPrior,VoxPrefDirMT,VoxPrefDirLIP,whichNeurInaVoxelMT,whichNeurInaVoxelLIP,whichNeurInaVoxelPrior]=simulateBOLD(motionDir,...
    priorstd,...
    priormean,...
    numVoxelsMT,...
    numVoxelsLIP,...
    NeurInaVoxelMT,...
    NeurInaVoxelLIP,...
    whichNeurInaVoxelMT,...
    whichNeurInaVoxelLIP,...
    whichNeurInaVoxelPrior,...
    numNeurMTkj,...
    sortVoxels,...
    OptiondisplayNetwork,...
    OptiondisplayBOLD)

%model 1- multiplicative gain
[MTBOLDmn,LIPBOLDmn,PriorBOLDmn,k,VoxRespAmpPrior,VoxPrefDirMT,VoxPrefDirLIP,whichNeurInaVoxelMT,whichNeurInaVoxelLIP,whichNeurInaVoxelPrior]=NNwithXGain2(motionDir,...
    priorstd,...
    priormean,...
    numVoxelsMT,...
    numVoxelsLIP,...
    NeurInaVoxelMT,...
    NeurInaVoxelLIP,...
    whichNeurInaVoxelMT,...
    whichNeurInaVoxelLIP,...
    whichNeurInaVoxelPrior,...
    numNeurMTkj,...
    sortVoxels,...
    OptiondisplayNetwork,...
    OptiondisplayBOLD);


%model 2- sharpening tuning curves