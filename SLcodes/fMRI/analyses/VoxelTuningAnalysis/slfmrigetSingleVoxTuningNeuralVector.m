
%slfmrigetSingleVoxTuningNeuralVector.m
%
%
% author: steeve laquitaine
%  date : 160114
% status: completed and tested
%purpose: plot voxel tuning fit over variable 0 (e.g., directions) sorted 
%         by variable 1 (e.g., coherence or switching)
%         and calculate neural vector according to population vector
%         equation:
%            
%           Voxel selectivity = meanresponses*directions./sum of mean responses
%
%
%Description: 
%   - voxel responses are normalized to the mean response ((resp/mean)*100)
%   - calculate neural vector
%
%
%  usage:
%
%      st = slfmrigetSingleVoxTuningNeuralVector(1,'myRandomDir','mySwitch',15,d)
%       
%
%input:
%     voxnum : voxel you want to plot (column of d.instances)
%       var0 : tuning x space (e.g., direction, orientation or location)
%       var1 : sort the tunings by other variable "var1" (e.g., coherence, switching)
%       var2 : another variable to select the data (e.g., 'myRandomCoh=0.06')
%          d : contains data in "d.instances" (n repeats x m voxels matrix)
%              variable 0 (e.g.,d.myRandomDir (n repeats x 1 vector)
%              variable 1 (e.g.,d.myRandomCoh (n repeats x 1 vector)
%              d can be generated by "slfmriGetInstancedb.m"
%               
%
%varargin:
%       
%     'color': colors of plot
%              e.g., 'colors',[0 0 1]
%
%output :
%
%         conditions: n examples x m variables matrix of conditions
%     conditionsSubs: # of unique conditions
%       numCondition: # of unique conditions
%              count: 
%               mean: 
%                sem: 
%          fitvmMean: 
%             fitvmK: nan
%             fitvmA: the amplitude scaling parameter
%         st.peakAmp: nan
%      fitvmEquation: 'neural vector'
%          st.minsqe: nan
%        st.rsquared: nan
%
%
%
function st = slfmrigetSingleVoxTuningNeuralVector(voxnum,var0,var1,var2,d,fitAlgo,varargin)

o = getAnalysisParams(varargin{:});

%case tuning is sorted by var1 values
%====================================
if ~any(var1=='=')
    
    %Bold response (instances by voxels)
    y = d.instances;
    
    %tuning x space
    x0 = d.(var0);

    %other variable to sort tuning
    x1 = d.(var1);
    
    %other variable to sort tuning
    var2nm = var2(1:find(var2=='=')-1);
    var2val = str2double(var2(find(var2=='=')+1:end));       
    x2 = d.(var2nm);
    
    %scale data to % signal change to the mean
    %percSignal = d.instances(:,voxnum)/mean(d.instances(:,voxnum),1)*100;
    percSignal = (d.instances(:,voxnum)-mean(d.instances(:,voxnum),1));
    %percSignal = (d.instances(:,voxnum));
    
    %Bold response (instances by voxels) for variable 1 value
    y = percSignal;
    
    %get stats (instance mean and sem by condition)
    st = SLmakeStat(y,x0,x1,x2);
    
    %unique variable values
    x1u = unique(x1);
    
    %plot mean and sem each condition
    set(gcf,'color','w')
    mycolx1 = linspecer(length(x1u));
    
    %tuning by var1 and var2 condition (colors)
    h = nan(1,length(x1u));
    lg = num2cell(h);
    for ix1 = 1 : length(x1u)
        var1Val = x1u(ix1);
        posVars = st.conditions(:,2) == var1Val & st.conditions(:,3) == var2val;
        var0Val = st.conditions(posVars,1);
        hold all
        %when condition exists
        if any(posVars)
            myerrorbar(var0Val,st.mean(posVars),'yError',st.sem(posVars),...
                'Symbol=o',['Color=[' num2str(mycolx1(ix1,:)) ']']);
            %get legend
            h(ix1) = plot(var0Val,st.mean(posVars),'color',mycolx1(ix1,:));
            lg{ix1} = num2str(x1u(ix1));
        end
    end
    xlabel(var0)
    ylabel('Response')
    legend(h,lg)%x1u)
end

%case tuning is for a specific value of var1 (e.g., var1=1)
if any(var1=='=')
    fprintf('%s \n','(slfmrigetVoxTuning) Getting tuning for a specific condition (var1).')
    
    %other variable to get tuning for
    %variable 1 name
    var1nm = var1(1:find(var1=='=')-1);        
    x1all = d.(var1nm);
    
    %var1 values (e.g.,'mySwitch=1') to get tuning for
    var1val = str2double(var1(find(var1=='=')+1:end));
    
    %var2
    var2nm = var2(1:find(var2=='=')-1);
    x2all = d.(var2nm);
    var2val = str2double(var2(find(var2=='=')+1:end));
       
    %tests coherence fixed -------
    posv1val = find((x1all==var1val & x2all==var2val));
    %------------      
    
    %scale data to % signal change to the mean
    %percSignal1 = d.instances(:,voxnum)/mean(d.instances(:,voxnum),1)*100;
    percSignal = (d.instances(:,voxnum)-mean(d.instances(:,voxnum),1));
    %percSignal = (d.instances(:,voxnum));
    %Bold response (instances by voxels) for variable 1 value
    y = percSignal(posv1val);
    
    %variable 0 (e.g., motion directions) for variable 1 value
    x0 = d.(var0)(posv1val);    
    
    %x1 values (same)
    x1 = x1all(posv1val);
    
    %get stats (instance mean and sem) for 
    %variable 1 value                    
    %is tuning significant
    [sig,nVecs,actualnVec,actualnVeclen,meanVlenBydir,VlenCIbyDir,vecdir] = slfMRIcheckTuningSignif(y,x0,1000);
    %[sig,nVecs,actualnVec,actualnVeclen,meanVlenBydir,VlenCIbyDir,vecdir] = slfMRIcheckTuningSignif(y,x0,1);
           
    %---------- plot mean and sem each condition data -----
    st = SLmakeStat(y,x0);
    var0Val = st.conditions(:,1);    
    myerrorbar(var0Val,st.mean,'yError',st.sem,...
        'Symbol=o',['Color=' num2str(o.color)]);
    %get legend
    h(1) = plot(var0Val,st.mean,'.','linestyle','none','color',o.color);
    xlabel(var0)
    ylabel('Response')   

    %save
    st.fitvmMode = round(actualnVec.deg.mean);   
    st.signifTun = sig;
    st.fitvmMean = nan;
    st.fitvmK = nan;
    st.fitvmA = nan;
    st.peakAmp = nan;
    st.fitvmEquation = 'neural vector';
    st.tuningFit = nan(1,360);
    st.minsqe = nan;
    st.rsquared = nan;
    
    %save for plot
    st.nVecs.deg.mean = nVecs.deg.mean;
    st.actualnVeclen = actualnVeclen;
    st.actualnVec = actualnVec;
    st.meanVlenBydir = meanVlenBydir;
    st.VlenCIbyDir = VlenCIbyDir;
    st.vecdir = vecdir;
end

function o = getAnalysisParams(varargin)

%color
if any(strcmp(varargin,'color'))
    o.color = varargin{find(strcmp(varargin,'color'))+1};
else
    o.color = 'k';
end

